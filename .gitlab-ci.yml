variables:
  MAVEN_OPTS: -Dmaven.repo.local=.m2/repository
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

stages:
  - version bump & maven build
  - docker-build
  - auto-deploy
  - convert
  - upload_pdf_to_s3

Version-bump & build:
  stage: version bump & maven build
  image: maven:3.8.7-openjdk-18-slim
  cache:
    paths:
      - .m2/repository/
  before_script:
    - chmod +x ./ci-scripts/build-before-script.sh
    - ./ci-scripts/build-before-script.sh
  script:
    - echo $PARENT_COUNT
    - echo $CI_COMMIT_MESSAGE
    - chmod +x ./ci-scripts/build-script.sh
    - ./ci-scripts/build-script.sh
  artifacts:
    paths:
      - ./target/*.jar
      - ./target/*.json
      - tag.env
  only:
    refs:
      - develop
      - release
      - master
  
.docker_build_template: &docker_build_configuration
  stage: docker-build
  services:
    - name: docker:23.0.1-dind
      alias: docker
  image:
    name: amazon/aws-cli:2.7.32
    entrypoint: [""]
  before_script:
    - TAG="$(cat tag.env)"
    - echo ${TAG}
    - amazon-linux-extras install docker
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $DOCKER_REGISTRY
  script:
    - docker build -t $CI_PROJECT_TITLE .
    - docker tag $CI_PROJECT_TITLE:latest $DOCKER_REGISTRY/$ECR_REPO:$CI_PROJECT_TITLE-$TAG
    - docker push $DOCKER_REGISTRY/$ECR_REPO:$CI_PROJECT_TITLE-$TAG


docker-build-dev:
  <<: *docker_build_configuration
  environment:
    name: Development
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /^Bump version.*/ && $CI_COMMIT_BRANCH == "develop"

docker-build-qa:
  <<: *docker_build_configuration
  environment:
    name: Quality Assurance
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /^Bump version.*/ && $CI_COMMIT_BRANCH == "release"
    - if: $CI_COMMIT_MESSAGE =~ /^'develop'.*/ && $CI_COMMIT_BRANCH == "release"

docker-build-prod:
  <<: *docker_build_configuration
  environment:
    name: Production
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /^Bump version.*/ && $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_MESSAGE =~ /^'release'.*/ && $CI_COMMIT_BRANCH == "master"


.deploy_to_eks: &deploy_configuration
  stage: auto-deploy
  image:
    name: vishwanathaws/helm:v1
    entrypoint: [""]
  before_script:
    - TAG="$(cat tag.env)"
    - echo "${TAG}"
    - aws s3 cp s3://$S3_BUCKET_NAME/ . --recursive  #(s3bucket helm chart)
    - helm version
  script:
    - aws eks update-kubeconfig --region ap-south-1 --name $CLUSTER_NAME
    - helm upgrade --install ${APP_NAME} ./helm_repo/$CI_PROJECT_TITLE/  -f ./helm_repo/$CI_PROJECT_TITLE/$VALUES_FILE --set image.repository=$LATEST_IMAGE-$TAG -n $NAMESPACE

deploy-dev:
  <<: *deploy_configuration
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /^Bump version.*/ && $CI_COMMIT_BRANCH == "develop"
  variables:
    CLUSTER_NAME: $CLUSTER_NAME
    APP_NAME: dev-journal
    LATEST_IMAGE : $DOCKER_REGISTRY/$ECR_REPO:$CI_PROJECT_TITLE
    VALUES_FILE: dev-values.yaml
    NAMESPACE: dev-core-svc
  environment:
    name: Development

deploy-qa:
  <<: *deploy_configuration
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /^Bump version.*/ && $CI_COMMIT_BRANCH == "release"
    - if: $CI_COMMIT_MESSAGE =~ /^'develop'.*/ && $CI_COMMIT_BRANCH == "release"
  variables:
    CLUSTER_NAME: $CLUSTER_NAME
    APP_NAME: qa-journal
    LATEST_IMAGE : $DOCKER_REGISTRY/$ECR_REPO:$CI_PROJECT_TITLE
    VALUES_FILE: qa-values.yaml
    NAMESPACE: qa-core-svc
  environment:
    name: Quality Assurance

deploy-prod:
  <<: *deploy_configuration
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /^Bump version.*/ && $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_MESSAGE =~ /^'release'.*/ && $CI_COMMIT_BRANCH == "master"
  variables:
    CLUSTER_NAME: $CLUSTER_NAME
    APP_NAME: prod-journal
    LATEST_IMAGE : $DOCKER_REGISTRY/$ECR_REPO:$CI_PROJECT_TITLE
    VALUES_FILE: prod-values.yaml
    NAMESPACE: prod-core-svc
  environment:
    name: Production



#---------------------------------#

convert_to_pdf:
  stage: convert
  image:
    name: pandoc/latex:edge-alpine
    entrypoint: [""]
  script:
    # Ensure the output directory exists
    - mkdir -p combined_output

    # Find the project directory in the current directory
    - echo "Searching for the directory..."
    - SB_DIR=$(find . -type d -name "journal")
    - if [ -z "$SB_DIR" ]; then echo "journal directory not found!"; exit 1; fi

    # Search for all .java files recursively inside sales_invoice
    - echo "Listing all .java files within $SB_DIR recursively..."
    - JAVA_FILES=$(find $SB_DIR -type f -name "*.java")
    - if [ -z "$JAVA_FILES" ]; then echo "No .java files found!"; exit 1; fi
    - echo "Found .java files:"
    - echo "$JAVA_FILES"

    # Combine all found .java files into a single file
    - echo "Combining all .java files into a single file..."
    - cat $JAVA_FILES > combined_output/all_code.java
    - echo "Contents of combined file:"
    # - cat combined_output/all_code.java

    # Convert the combined file to PDF
    - echo "Converting combined file to PDF..."
    - pandoc -f markdown -o combined_output/journal.pdf combined_output/all_code.java --pdf-engine=pdflatex
    - echo "PDF conversion completed."

  artifacts:
    paths:
      - combined_output/journal.pdf
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"' # Manual trigger
      when: manual
    - if: '$CI_COMMIT_TAG =~ /^release-/' # Tagged release
      when: on_success
    - when: never # Prevents the job from running by default    


upload_pdf_to_s3:
  stage: upload_pdf_to_s3  #  New stage for upload
  image:
    name: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest  # Image with AWS CLI pre-installed
  dependencies:  # Depend on previous stage for artifact
    - convert_to_pdf
  script:
    # Ensure the artifact is in the current working directory
    - ls -la combined_output
    - if [ ! -f combined_output/journal.pdf ]; then echo "PDF not found!"; exit 1; fi

    # Install AWS CLI (the image should already have it)
    - echo "uploading file to s3"
    - aws s3 cp combined_output/journal.pdf s3://assets.kb.merco.com/pdf/journal.pdf
  rules:
    - if: '$CI_COMMIT_TAG =~ /^release-/' # Tagged release
      when: on_success

  